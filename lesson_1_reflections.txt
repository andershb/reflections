Reflections upon using FC to find differences (errors, typos...) between two files (versions of 
documents)

    Obvious, really. It saves you oceans of time not having to sift through thousands of lines of code 
    in order to spot the one tiny typo that makes the whole script crash.

How could having easy access to the entire history of a file make you a more efficient programmer 
in the long term?

    Managing file versions manually takes a lot of time. Besides, you might forget, and overwrite the 
    file you might have needed to restore to. Oops!... Having this done automatically saves you a lot 
    of time, grievance and reconstruction time...

What do you think are the pros and cons of manually choosing when to create a commit, like you do 
in Git, vs having versions automatically saved, like Google Docs does?

    Pros: It is possible to keep the commits logical and coherent. You can separate changes that have
    no logical connection, into separate commits.

    Cons: You might forge   t to commit, or postpone commits in order not to make commits too small. 
    This might increase the risk of losing ompoprtant data or several hours of work in case of e.g. 
    a computer failure.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file separately?

    Git is most probably oriented especially towards programming, in which case the need for 
    tracking changes in multiple files, files that depend on one another. Google Docs ist most
    probably directet towards office use, where dokuments tend to be single file letters or other 
    documents that don't have interrelations or dependencies.

How can you use the commands git log and git diff to view the history of files?
    
    Git log is used to get an overview over all commits in the project. The description will show 
    which files were changed and what the changes are. 
    Git diff will how us what exact changes (added and deleted lines) have been done to the files.
    
How might using version control make you more confident to make changes that could break something?

    I could allways go back to an earlier version using checkout, instead of using hours reading 
    through hundreds of lines of code, perhaps in several different files, without spotting the 
    mistake - simply because i don't notice that a line is missing... Using checkout I can easily 
    see the changes that is made, and quickly spot the mistake. That is, if I hav made commits 
    often enough, and do not have hundreds of changed lines in my commit.
    
Now that you have your workspace set up, what do you want to try using Git for?

    I am taking a course in android app development, in which it is required to use verson control.
    But I also have some php-projects that have grown rather large, and i will try to see if using 
    Git will ease the process somewhat. I also hope to make use of it professionally in the future.
    
    
    
    

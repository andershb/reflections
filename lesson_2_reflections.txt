What happens when you initialize a repository? Why do you need to do it?

    I suppose init simply makes the folder(s) into a repository, with all the bells and whistles 
    needed to manage the repository. For instance i probably creates a database for all the 
    commits, i.e. which files it contains, and the contents of all the files and changes. All 
    this will be neccesary to keep account of all the changes, and to checkout the right versions
    of the files.

How is the staging area different from the working directory and the repository? What value do you 
think it offers?

    The staging area is different to the working directory in being a part of the repository.
    The working directory is just a container for the repository files, but all files in the wd do 
    not need to be part of the repository. The staging area is to be considered a list of files 
    that belong to the repository, and that the git commands work on.
    
How can you use the staging area to make sure you have one commit per logical change?

    It is possible to check differences between files in working directory and staging area, and
    also between staging area and repository. This way you can check out what changes are made to
    the files before you commit. 
    
What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

    Branches would help when you need to develop different versions of your project, either
    for testing out new features/doing fundamental experimental changes or different versions
    for different customers/markets. I can imagine using branches when developing full and limited
    versions of software, or free vs. paid apps, with or without ads, different functionality etc.

How do the diagrams help you visualize the branch structure?

    It helps visualize the branch structure, silly! ;-P
    Leading question?
    But OK. For me it's important to know that the commits are connected as a graph/linked list 
    data type. This is something I know and  have worked with... about 15 years ago. The 
    visualization of what happens when you checkout a commit, makes me more confident about what 
    actually is happening inside the repository, and makes me understand what I actually did a few
    exercises ago, when I was totally green on this checkout-thing.
    
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    The result of merging two branches is that changes in both branches ar merged together so that
    changes in both branches are included in the same branch, and this branch becomes the new master.
    The way this is done, is that Git evaluates changes made in both branches AND the last common
    commit (before the branching). If lines that exist inn the mitual commit, are deleted in one
    of the branches, they get deleted in the merge. All lines that exis in both are kept, and lines 
    that are new in one branch, and do not exist from before, are kept.
    
